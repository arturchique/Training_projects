    Как известно, у всех змей есть как минимум тело, голова и цвет.
Их все надо как-то определить. Для этого мы используем переменные -- конструкции,
существующие во всех языках программирования, нужные для сохранения каких-либо данных.
        Например:
  snake_head -- переменная, которая хранит в себе список с координатами (расположением в
игровом рпространстве) головы змеи.
  snake_body -- переменная, которая хранит в себе список со списками из координат. То есть
так мы сохраняем все координаты тела змеи, которое будет состоять из блоков. Изначально змея
состоит из трех координат (включая голову), то есть из трех блоков
  WHITE, BLACK, GREEN, ... -- переменные, которые хранят коды цветов. Среди программистов так
принято -- сохранять неизменяемые данные в переменные, которые обозначаются ЗАГЛАВНЫМИ буквами,
такие переменные называются константами, или постоянными (constantly англ.)

    Также всем известно, что змеи умеют что-то делать. Например шипеть, но это не пригодится
нам в нашей игре. Однако наша змея должна уметь двигаться, поворачиваться, есть еду, да и
в конце концов умирать, если вдруг она врежется в стену или, не дай Бог, в себя
        Например:
  move_head() -- функция, то есть действие, которое мы с вами запрограммируем, а
змея будет выполнять. Данная функция отвечает за перемещение головы змеи, то есть за
изменение координат этой головы
  change_direction() -- функция, отвечающая за изменение направления движения
  check_for_crash() -- функция, которая проверяет, не попала ли змея в аварию

    Но все эти функции как-то должны выполняться и работать? Правильно! Для этого их нужно
определить. Для определения функции в языке Python используется ключевое слово def.
    Далее эта функция должна что-то уметь. Ну как минимум нам нужно обходить списки с
координатами и проверять условия. Для этого во всех языках программирования есть конструкции
циклов и условий.
    В Python это конструкции for ... in ... : (конструкци обхода перечисляемых объектов) и
if ... :
    Разберем каждую конструкцию. Начнем с конструкции for. Для начала мы должны передать ей
перечисляемый объект, например список. Чтобы обойти все элементы списка мы должны прямо на
английском языке и написать: for element in list. В нашем случае это список блоков тела змеи:
for block in snake_body. В теле такой конструкции все элементы будут называться block, а код
будет выполнен столько раз, сколько блоков мы имеем.
    Конструкуия if ... : проверяет условие, написанное после ключевого слова if. Код
написанный в теле этой конструкции будет выполнен только в том случае, если условие выполнится.
    Например код ниже будет выполняться всегда:
if 2 + 2 == 4:
    print("Работает")
    А следующий код не выполниться никогда:
if 2 + 2 == 5:
    print("Какой гений до этого додумался?")

    Также мы используем конструкцию цикла, которая заключает в себе и цикл и условие.
Это конструкция while ... : . Код, написанный в теле конструкции, будет выполняться всегда,
когда условие, описанное после ключевого слова while верно. Например код ниже будет
выполняться бесконечно, пока его не прервут в ручную.
while True:
    print("Ну сколько можно уже?!?!")
А код далее выполнится 3 раза:
a = 1
while a <= 3:
    print(a)
    a = a + 1

Выведет:
1
2
3

    Еще мы используем ключевое слово global внутри функции, чтобы сказать функции, чтобы она
не создавала новые переменные, а использовала существующие вне описания функции.
